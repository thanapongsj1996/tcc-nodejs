name: Push to DockerHub and Update K8s Deployment
run-name: ${{ github.actor }} is merging this app ðŸš€
on:
  pull_request_target:
    types:
      - closed

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo The PR was merged

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull latest image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/tcc-nodejs:latest

      - name: Tag image with release version
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/tcc-nodejs:latest ${{ secrets.DOCKER_USERNAME }}/tcc-nodejs:release-${{ github.run_number }}

      - name: Push new tag to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/tcc-nodejs:release-${{ github.run_number }}

      - name: Update K8s Deployment
        run: |
          # Generate a new image tag using the environment variable
          image_with_new_tag="${{ secrets.DOCKER_USERNAME }}/tcc-nodejs:release-${{ github.run_number }}"

          # Update the K8s deployment file using yq
          yq eval ".spec.template.spec.containers[0].image |= \"${image_with_new_tag}\"" -i ./manifest/prod/deployment.yaml

          # Commit the changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout main
          git add ./manifest/prod/deployment.yaml
          git commit -m "Update image to ${image_with_new_tag}"
          git push origin main

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@1bee7de035d65ec5da40a31f8589e240eba8fde5
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: autopilot-cluster-1
          location: asia-southeast1
          project_id: ${{ secrets.GKE_PROJECT }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Deploy the Docker image to the GKE cluster
        run: |-
          kubectl apply -f ./manifest/prod
