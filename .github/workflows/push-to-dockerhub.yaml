name: Push to DockerHub
run-name: ${{ github.actor }} is building and pushing container to DockerHub ðŸš€
on:
  push:
    branches:
      - develop
jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    env:
      NEW_TAG: ${{ github.sha }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/tcc-nodejs

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/tcc-nodejs:${{ github.sha }},${{ steps.meta.outputs.tags }},${{ secrets.DOCKER_USERNAME }}/tcc-nodejs:latest
          labels: ${{ steps.meta.outputs.labels }}

      - name: Debug
        run: echo "NEW_TAG value $NEW_TAG"

      - name: Update K8s Deployment
        run: |
          # Generate a new image tag using the environment variable
          new_tag="${{ secrets.DOCKER_USERNAME }}/tcc-nodejs:${{ github.sha }}"

          # Update the K8s deployment file using yq
          yq eval ".spec.template.spec.containers[0].image |= \"${new_tag}\"" -i ./manifest/deployment.yaml

          # Commit the changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout develop
          git add ./manifest/deployment.yaml
          git commit -m "Update image tag to ${new_tag}"
          git push origin develop

          # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@1bee7de035d65ec5da40a31f8589e240eba8fde5
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f
        with:
          cluster_name: autopilot-cluster-1
          location: asia-southeast1-a
          project_id: ${{ secrets.GKE_PROJECT }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          kubectl apply -f ./manifest
